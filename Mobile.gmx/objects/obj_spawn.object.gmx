<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables
// Tweakable
start_speed = 3;
walls_per_gradient = 28;
minus = 6;

spawn_range = 130;

// Other
state = "SPAWN_CYCLE";

wall_speed = start_speed;

current_spawned = 0;
wall_height = 200;

// Colors
number_of_colors = 8;

n = get_next_color(1);

r = n[0];
g = n[1];
b = n[2];

r_step = calculate_step(r, walls_per_gradient);
g_step = calculate_step(g, walls_per_gradient);
b_step = calculate_step(b,  walls_per_gradient);

current_color_index = 1;

// Spawn
recent_spawn = instance_create(0, -wall_height, obj_wall);
recent_spawn.vertical_speed = wall_speed;
        
recent_spawn.cl = make_color_rgb(r + (r_step * (current_spawned)), g + (g_step * (current_spawned)), b + (b_step * (current_spawned)));

previous_offset = 0;

// Alarm
alarm[0] = 30;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Safety
if (instance_number(obj_spawn) &gt; 1) {
    show_message("CRITICAL ERROR: MULTIPLE CONTROL UNITS");
    game_end();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>wall_speed += 0.1;

with(obj_wall) {
    vertical_speed += 0.1;
}

alarm[0] = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state == "SPAWN_CYCLE") {
    rsy = recent_spawn.y;

    if (rsy &gt;= 0) {
            // Change Color (Notnow)
            if (current_spawned &gt;= walls_per_gradient - minus) {
            current_spawned = 0;
            
            wall_speed += 2;
            
            with(obj_wall) {
                vertical_speed += 2;
            }
            
            // Switch color
            current_color_index += 1;
            
            if (current_color_index &gt; number_of_colors)
                current_color_index = 1;
                
            new_c = get_next_color(current_color_index);
            
            r = new_c[0];
            g = new_c[1];
            b = new_c[2];
            
            r_step = calculate_step(r, walls_per_gradient);
            g_step = calculate_step(g, walls_per_gradient);
            b_step = calculate_step(b, walls_per_gradient);
            
            // Create color switcher
            var cs;
            cs = instance_create(300, room_height, obj_color_switcher);
            cs.r = r;
            cs.g = g;
            cs.b = b;
            cs.r_step = r_step;
            cs.b_step = b_step;
            cs.g_step = g_step;
        }
    
    
        recent_spawn = instance_create(0, rsy - wall_height + wall_speed, obj_wall);
        recent_spawn.vertical_speed = wall_speed;
        
        recent_spawn.cl = make_color_rgb(r + (r_step * (current_spawned)), g + (g_step * (current_spawned)), b + (b_step * (current_spawned)));
         
        // Random Offset
        if (previous_offset &lt; 40 &amp;&amp; previous_offset &gt; -40 &amp;&amp; irandom(4) == 1) {
            var random_direction = choose(1, -1);
            random_offset = random_direction * (40 + irandom(spawn_range - 40));
        } else {        
            random_offset = irandom_range(-spawn_range, spawn_range);
        }
        
        previous_offset = random_offset;  
    
        recent_spawn.offset_from_mid += random_offset;
        
        
        current_spawned += 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
